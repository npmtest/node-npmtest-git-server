{"/home/travis/build/npmtest/node-npmtest-git-server/test.js":"/* istanbul instrument in package npmtest_git_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-server/lib.npmtest_git_server.js":"/* istanbul instrument in package npmtest_git_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_server.__dirname + '/lib.npmtest_git_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-server/node_modules/git-server/host.js":"// Generated by CoffeeScript 1.6.1\n/*\n  \n  GOAL: A simple to setup and run, multi-tenant Git Server written in NodeJS.\n  \n  This was initially created to be used as a multi-tenant git server with powerful event triggers.\n  */\n\n  var GitServer, async, fs, http, https, pushover,\n  _this = this,\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  pushover = require('pushover');\n\n  http = require('http');\n\n  https = require('https');\n\n  async = require('async');\n\n  fs = require('fs');\n\n  crypto = require('crypto');\n\n  git_events = require('git-emit');\n\n  path = require('path');\n\n  EventEmitter = require('events').EventEmitter\n\n  proxy = require('event-proxy')\n\n  GitServer = (function() {\n  /*\n      Constructor function for each instance of GitServer\n      @param {Array} repos List of repositories\n      @param {String} repoLocation Location where the repo's are/will be stored\n      @param {Int} port Port on which to run this server.\n      @param {Object} certs Object of 'key' and 'cert' with the location of the certs (only used for HTTPS)\n      */\n\n      function GitServer(repos, logging, repoLocation, port, certs) {\n        var _this = this;\n        this.repos = repos != null ? repos : [];\n        this.logging = logging != null ? logging : false;\n        this.repoLocation = repoLocation != null ? repoLocation : '/tmp/repos';\n        this.port = port != null ? port : 7000;\n        this.certs = certs;\n        this.getRepo = function(repoName) {\n          return GitServer.prototype.getRepo.apply(_this, arguments);\n        };\n        this.getUser = function(username, password, repo) {\n          return GitServer.prototype.getUser.apply(_this, arguments);\n        };\n        this.checkTriggers = function(method, repo) {\n          return GitServer.prototype.checkTriggers.apply(_this, arguments);\n        };\n        this.onPush = function(push) {\n          return GitServer.prototype.onPush.apply(_this, arguments);\n        };\n        this.onFetch = function(fetch) {\n          return GitServer.prototype.onFetch.apply(_this, arguments);\n        };\n        this.makeReposIfNull = function(callback) {\n          return GitServer.prototype.makeReposIfNull.apply(_this, arguments);\n        };\n        this.gitListeners = function() {\n          return GitServer.prototype.gitListeners.apply(_this, arguments);\n        };\n        this.permissableMethod = function(username, password, method, repo, gitObject) {\n          return GitServer.prototype.permissableMethod.apply(_this, arguments);\n        };\n        this.processSecurity = function(gitObject, method, repo) {\n          return GitServer.prototype.processSecurity.apply(_this, arguments);\n        };\n        this.log = function() {\n          return GitServer.prototype.log.apply(_this, arguments);\n        };\n        this.createRepo = function(repo, callback) {\n          return GitServer.prototype.createRepo.apply(_this, arguments);\n        };\n        this.git = pushover(this.repoLocation, {\n          autoCreate: false\n        });\n        this.permMap = {\n          fetch: 'R',\n          push: 'W'\n        };\n        this.gitListeners();\n        this.makeReposIfNull(function() {\n          _this.bindEvents(function() {\n            var message, red, reset;\n            if (_this.certs != null) {\n              _this.server = https.createServer(_this.certs, _this.git.handle.bind(_this.git));\n            } else {\n              red = '\\033[31m';\n              reset = '\\033[0m';\n              message = \"WARNING: No SSL certs passed in. Running as HTTP and not HTTPS.\\nBe careful, without HTTPS your user/pass will not be encrypted\";\n              console.log(red + message + reset);\n              _this.server = http.createServer(_this.git.handle.bind(_this.git));\n            }\n            return _this.server.listen(_this.port, function() {\n              return _this.log('Server listening on ', _this.port, '\\r');\n            });\n          });\n        });\n      }\n\n      GitServer.prototype.bindEvents = function(callback) {\n        var self = this;\n        for (var i in this.repos) {\n          this.repos[i].path = path.normalize(this.repoLocation+\"/\"+this.repos[i].name+\".git\");\n          this.repos[i].git_events = git_events(this.repos[i].path);\n          this.repos[i].last_commit = {};\n          this.repos[i].event = function(repo, update) {\n            emitters = EventEmitter.listenerCount(self, update.name);\n            if(emitters < 1 && update.canAbort) {\n              update.accept();\n            } else {\n              self.emit(update.name, update, repo);\n            }\n          }\n          var map = {\n            \"post-applypatch\": this.repos[i].event,\n            \"post-commit\": this.repos[i].event,\n            \"post-checkout\": this.repos[i].event,\n            \"post-merge\": this.repos[i].event,\n            \"post-receive\": this.repos[i].event,\n            \"post-update\": this.repos[i].event,\n            \"post-rewrite\": this.repos[i].event,\n            \"applypatch-msg\": this.repos[i].event,\n            \"pre-applypatch\": this.repos[i].event,\n            \"pre-commit\": this.repos[i].event,\n            \"prepare-commit-msg\": this.repos[i].event,\n            \"commit-msg\": this.repos[i].event,\n            \"pre-rebase\": this.repos[i].event,\n            \"pre-receive\": this.repos[i].event,\n            \"update\": this.repos[i].event,\n            \"pre-auto-gc\": this.repos[i].event\n          }\n          proxy(process, map, this.repos[i].git_events, this.repos[i]);\n        }\n        callback();\n      }\n\n  /*\n      Create a repo on the fly\n      @param {Object} repoName Name of the repo we are creating.\n      */\n\n\n      GitServer.prototype.createRepo = function(repo, callback) {\n        if ((repo.name == null) || (repo.anonRead == null)) {\n          this.log('Not enough details, need atleast .name and .anonRead');\n          false;\n        }\n        if (!this.getRepo(repo.name)) {\n          this.log('Creating repo', repo.name);\n          this.repos.push(repo);\n          return this.git.create(repo.name, callback);\n        } else {\n          return this.log('This repo already exists');\n        }\n      };\n\n      GitServer.prototype.log = function() {\n        var args, key, value;\n        args = (function() {\n          var _results;\n          _results = [];\n          for (key in arguments) {\n            value = arguments[key];\n            _results.push(\"\" + value);\n          }\n          return _results;\n        }).apply(this, arguments);\n        if (this.logging) {\n          return console.log(\"LOG: \", args.join(' '));\n        }\n      };\n\n  /*\n      Process the request and check for basic authentication.\n      @param {Object} gitObject Git object from the pushover module\n      @param {String} method Method we are getting security for ['fetch','push']\n      @param {Object} repo Repo object that we are doing this method on\n      */\n\n\n      GitServer.prototype.processSecurity = function(gitObject, method, repo) {\n        var auth, creds, plain_auth, req, res;\n        req = gitObject.request;\n        res = gitObject.response;\n        auth = req.headers['authorization'];\n        if (auth === void 0) {\n          res.statusCode = 401;\n          res.setHeader('WWW-Authenticate', 'Basic realm=\"Secure Area\"');\n          return res.end('<html><body>Need some creds son</body></html>');\n        } else {\n          plain_auth = (new Buffer(auth.split(' ')[1], 'base64')).toString();\n          creds = plain_auth.split(':');\n          return this.permissableMethod(creds[0], creds[1], method, repo, gitObject);\n        }\n      };\n\n  /*\n      Check to see if:  return\n        Username and password match  return\n        This user has permission to do this method on this repo\n      \n      @param {String} username Username of the requesting user\n      @param {String} password Password of the requesting user\n      @param {String} method Method we are checking against ['fetch','push']\n      @param {Object} gitObject Git object from pushover module\n      */\n\n\n      GitServer.prototype.permissableMethod = function(username, password, method, repo, gitObject) {\n        var user, _ref;\n        this.log(username, 'is trying to', method, 'on repo:', repo.name, '...');\n        user = this.getUser(username, password, repo);\n        if (user === false) {\n          this.log(username, 'was rejected as this user doesnt exist, or password is wrong');\n          return gitObject.reject(500, 'Wrong username or password');\n        } else {\n          if (_ref = this.permMap[method], __indexOf.call(user.permissions, _ref) >= 0) {\n            this.log(username, 'Successfully did a', method, 'on', repo.name);\n            this.checkTriggers(method, repo, gitObject);\n            return gitObject.accept();\n          } else {\n            this.log(username, 'was rejected, no permission to', method, 'on', repo.name);\n            return gitObject.reject(500, \"You dont have these permissions\");\n          }\n        }\n      };\n\n      GitServer.prototype.gitListeners = function() {\n        this.git.on('push', this.onPush);\n        this.git.on('fetch', this.onFetch);\n        return this.git.on('info', this.onFetch);\n      };\n\n  /*\n      Checks all the passed in repo's to make sure they all have a real .git directory.\n      @params {Function} callback Function to call when we complete this task.\n      */\n\n\n      GitServer.prototype.makeReposIfNull = function(callback) {\n        var repo, repoNames, _i, _len, _ref,\n        _this = this;\n        this.log('Making repos if they dont exist');\n        repoNames = [];\n        _ref = this.repos;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          repo = _ref[_i];\n          if ((repo.name != null) && (repo.anonRead != null) && (repo.users != null)) {\n            repoNames.push(\"\" + repo.name + \".git\");\n          } else {\n            console.log('Bad Repo', repo.name, 'is missing an attribute..');\n          }\n        }\n        return async.reject(repoNames, this.git.exists.bind(this.git), function(results) {\n          var _j, _len1;\n          if (results.length > 0) {\n            for (_j = 0, _len1 = results.length; _j < _len1; _j++) {\n              repo = results[_j];\n              console.log('Creating repo directory: ', repo);\n            }\n            return async.map(results, _this.git.create.bind(_this.git), callback);\n          } else {\n            return callback();\n          }\n        });\n      };\n\n  /*\n      When the git fetch command is triggered, this is fired.\n      @param {Object} fetch Git object from pushover module.\n      */\n\n\n      GitServer.prototype.onFetch = function(fetch) {\n        var repo;\n        this.log('Got a FETCH call for', fetch.repo);\n        repo = this.getRepo(fetch.repo);\n        if (repo !== false) {\n          if (repo.anonRead === true) {\n            this.checkTriggers('fetch', repo);\n            return fetch.accept();\n          } else {\n            return this.processSecurity(fetch, 'fetch', repo);\n          }\n        } else {\n          this.log('Rejected - Repo', fetch.repo, 'doesnt exist');\n          return fetch.reject(500, 'This repo doesnt exist');\n        }\n      };\n\n  /*\n      When the git push command is triggered, this is fired.\n      @param {Object} push Git object from pushover module.\n      */\n\n\n      GitServer.prototype.onPush = function(push) {\n        var repo;\n        this.log('Got a PUSH call for', push.repo);\n        repo = this.getRepo(push.repo);\n        var data = {\n          status: push.status,\n          repo: push.repo,\n          service: push.service,\n          cwd: push.cwd,\n          last: push.last,\n          commit: push.commit,\n          evName: push.evName,\n          branch: push.branch\n        }\n        repo.last_commit = data;\n        if (repo !== false) {\n          return this.processSecurity(push, 'push', repo);\n        } else {\n          this.log('Rejected - Repo', push.repo, 'doesnt exist');\n          return push.reject(500, 'This repo doesnt exist');\n        }\n      };\n\n  /*\n      Check if this repo has onSuccessful triggers\n      @param {String} method fetch|push\n      @param {Object} repo Repo object we are checking\n      */\n\n\n      GitServer.prototype.checkTriggers = function(method, repo, gitObject) {\n        var _base;\n        if (repo.onSuccessful != null) {\n          if (repo.onSuccessful[method] != null) {\n            this.log('On successful triggered: ', method, 'on', repo.name);\n            return typeof (_base = repo.onSuccessful)[method] === \"function\" ? _base[method](repo, method, gitObject) : void 0;\n          }\n        }\n      };\n\n  /*\n      Get the user object, check user/pass is correct and it exists in this repo.\n      @param {String} username Username to find\n      @param {String} password Password of the Username\n      @param {Object} repo Repo object this user should be in.\n      */\n\n\n      GitServer.prototype.getUser = function(username, password, repo) {\n        var userObject, _i, _len, _ref;\n        crypted_password = crypto.createHash('sha1').update(password).digest('hex');\n        _ref = repo.users;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          userObject = _ref[_i];\n          if (userObject.user.username === username && (userObject.user.password === password || crypted_password === userObject.user.password)) {\n            return userObject;\n          }\n        }\n        return false;\n      };\n\n  /*\n      Get the repo from the array of repos\n      @param {String} repoName Name of the repo we are trying to find\n      */\n\n\n      GitServer.prototype.getRepo = function(repoName) {\n        var repo, _i, _len, _ref;\n        _ref = this.repos;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          repo = _ref[_i];\n          if (repo.name + '.git' === repoName) {\n            return repo;\n          }\n        }\n        return false;\n      };\n\n      GitServer.prototype.__proto__ = EventEmitter.prototype;\n\n      return GitServer;\n    })();\n\n    module.exports = GitServer;\n","/home/travis/build/npmtest/node-npmtest-git-server/node_modules/git-server/cli.js":"#!/usr/bin/env node\n// Generated by CoffeeScript 1.6.1\n/*\n\tThis is the CLI interface for using git-server.\n*/\n\nvar CLI, EventEmitter, GITCLI, GitServer, Table, async, commander, fs, getUserHomeDir, logging, mkdirp, path, repoDB, repoLocation, repoPort, repos, _c, _g,\n  _this = this,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nEventEmitter = require('events').EventEmitter;\n\nCLI = require('cli-listener');\n\nGitServer = require('./host.js');\n\nmkdirp = require('mkdirp');\n\nfs = require('fs');\n\nasync = require('async');\n\npath = require('path');\n\nTable = require('cli-table');\n\ncommander = require('commander');\n\ncommander.version('0.0.1').option('-p, --port [value]', 'Port to run Git on', parseInt).option('-d, --directory [value]', 'Directory of the repos').option('-l, --logging', 'Verbose logging on or off').parse(process.argv);\n\nrepoPort = commander.port || 7000;\n\nlogging = commander.logging || false;\n\ngetUserHomeDir = function() {\n  var dir;\n  if (process.platform === 'win32') {\n    dir = 'USERPROFILE';\n  } else {\n    dir = 'HOME';\n  }\n  return process.env[dir];\n};\n\nrepoLocation = commander.directory || path.join(getUserHomeDir(), './git-server/repos');\n\nif (commander.directory !== void 0) {\n  repoDB = commander.directory + '.db';\n} else {\n  repoDB = path.join(getUserHomeDir(), './git-server/repos.db');\n}\n\nmkdirp.sync(repoLocation);\n\nif (fs.existsSync(repoDB)) {\n  repos = JSON.parse(fs.readFileSync(repoDB));\n} else {\n  repos = {\n    repos: [],\n    users: []\n  };\n}\n\nGITCLI = (function(_super) {\n\n  __extends(GITCLI, _super);\n\n  /*\n  \t\tConstructor for the CLI interface\n  \t\t@param {Object} gitServer Git-Server object instance\n  \t\t@param {Array} users Users we are managing\n  */\n\n\n  function GITCLI(gitServer, users) {\n    var availableCalls, welcomeMessage,\n      _this = this;\n    this.gitServer = gitServer;\n    this.users = users != null ? users : [];\n    this.saveConfig = function() {\n      return GITCLI.prototype.saveConfig.apply(_this, arguments);\n    };\n    this.listRepos = function(callback) {\n      return GITCLI.prototype.listRepos.apply(_this, arguments);\n    };\n    this.listUsers = function(callback) {\n      return GITCLI.prototype.listUsers.apply(_this, arguments);\n    };\n    this.columnPercentage = function(percentage) {\n      return GITCLI.prototype.columnPercentage.apply(_this, arguments);\n    };\n    this.getUser = function(username) {\n      return GITCLI.prototype.getUser.apply(_this, arguments);\n    };\n    this.addUserToRepo = function(callback) {\n      return GITCLI.prototype.addUserToRepo.apply(_this, arguments);\n    };\n    this.createUser = function(callback) {\n      return GITCLI.prototype.createUser.apply(_this, arguments);\n    };\n    this.createRepo = function(callback) {\n      return GITCLI.prototype.createRepo.apply(_this, arguments);\n    };\n    availableCalls = {\n      'create repo': this.createRepo,\n      'create user': this.createUser,\n      'list repos': this.listRepos,\n      'list users': this.listUsers,\n      'add user to repo': this.addUserToRepo\n    };\n    welcomeMessage = \"Welcome to Git Server - Powered by NodeJS\\n - Repo Location: \t\" + repoLocation + \"\\n - Listening Port: \t\" + repoPort + \"\\n - Repo Count: \" + this.gitServer.repos.length + \"\\n - User Count: \" + this.users.length;\n    this.cli = new CLI('git-server', welcomeMessage, availableCalls);\n    this.on('changedData', this.saveConfig);\n    setTimeout(this.cli.resetInput, 100);\n  }\n\n  GITCLI.prototype.createRepo = function(callback) {\n    var _this = this;\n    return this.cli.ask({\n      name: 'Repo Name: ',\n      anonRead: 'Anonymous Access? [y,N] :: '\n    }, function(err, results) {\n      var anon, name;\n      if (err) {\n        throw err;\n      }\n      name = results.name.toLowerCase();\n      anon = results.anonRead.toLowerCase();\n      if (anon === 'y') {\n        anon = true;\n      } else {\n        anon = false;\n      }\n      _this.gitServer.createRepo({\n        name: name,\n        anonRead: anon,\n        users: []\n      });\n      _this.emit('changedData');\n      return callback();\n    });\n  };\n\n  GITCLI.prototype.createUser = function(callback) {\n    var _this = this;\n    return this.cli.ask({\n      username: 'Users username: ',\n      password: 'Users password: '\n    }, function(err, answers) {\n      var user, username;\n      if (err) {\n        throw err;\n      }\n      username = answers.username.toLowerCase();\n      user = _this.getUser(username);\n      if (user !== false) {\n        console.log('This username already exists');\n        return callback();\n      } else {\n        user = {\n          username: username,\n          password: answers.password\n        };\n        _this.users.push(user);\n        _this.emit('changedData');\n        return callback();\n      }\n    });\n  };\n\n  GITCLI.prototype.addUserToRepo = function(callback) {\n    var _this = this;\n    return this.cli.ask({\n      repoName: 'Repo Name: ',\n      username: 'Users username: ',\n      permissions: 'Permissions (comma seperated: R,W ): '\n    }, function(err, answers) {\n      var permissions, repo, repoName, user, username;\n      repoName = answers.repoName.toLowerCase();\n      username = answers.username.toLowerCase();\n      repo = _this.gitServer.getRepo(repoName + '.git');\n      user = _this.getUser(username);\n      permissions = answers.permissions.split(',');\n      if (permissions.length === 0) {\n        permissions = ['R'];\n      }\n      if (repo === false) {\n        return console.log('Repo doesnt exist.');\n      } else if (user === false) {\n        return console.log('User doesnt exist.');\n      } else {\n        repo.users.push({\n          user: user,\n          permissions: permissions\n        });\n        _this.emit('changedData');\n        return callback();\n      }\n    });\n  };\n\n  /*\n  \t\tLoop through and find this user\n  \t\t@param {String} username Username of the user we are looking for\n  */\n\n\n  GITCLI.prototype.getUser = function(username) {\n    var user, _i, _len, _ref;\n    _ref = this.users;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      user = _ref[_i];\n      if (user.username === username) {\n        return user;\n      }\n    }\n    return false;\n  };\n\n  /*\n  \t\tGet the number of columns needed from a % width\n  \t\t@param {Int} percentage Percentage of the console width\n  */\n\n\n  GITCLI.prototype.columnPercentage = function(percentage) {\n    return Math.floor(process.stdout.columns * (percentage / 100));\n  };\n\n  GITCLI.prototype.listUsers = function(callback) {\n    var repo, repoUser, table, user, users, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;\n    users = this.users;\n    _ref = this.users;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      user = _ref[_i];\n      user.repos = [];\n      _ref1 = this.gitServer.repos;\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        repo = _ref1[_j];\n        _ref2 = repo.users;\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n          repoUser = _ref2[_k];\n          if (repoUser.user.username === user.username) {\n            user.repos.push({\n              name: repo.name,\n              permissions: repoUser.permissions\n            });\n          }\n        }\n      }\n    }\n    table = new Table({\n      head: ['Username', 'Password', 'Repos'],\n      colWidths: [this.columnPercentage(40) - 1, this.columnPercentage(20) - 1, this.columnPercentage(40) - 1]\n    });\n    _ref3 = this.users;\n    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n      user = _ref3[_l];\n      repos = (function() {\n        var _len4, _m, _ref4, _results;\n        _ref4 = user.repos;\n        _results = [];\n        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {\n          repo = _ref4[_m];\n          _results.push(\"\" + repo.name + \" (\" + (repo.permissions.join(',')) + \")\");\n        }\n        return _results;\n      })();\n      table.push([user.username, user.password, repos.join('\\n')]);\n    }\n    console.log(table.toString());\n    return callback();\n  };\n\n  GITCLI.prototype.listRepos = function(callback) {\n    var repo, table, user, users, _i, _len;\n    repos = this.gitServer.repos;\n    table = new Table({\n      head: ['Repo Name', 'Anonymous Reads', 'Users'],\n      colWidths: [this.columnPercentage(40) - 1, this.columnPercentage(20) - 1, this.columnPercentage(40) - 1]\n    });\n    for (_i = 0, _len = repos.length; _i < _len; _i++) {\n      repo = repos[_i];\n      users = (function() {\n        var _j, _len1, _ref, _results;\n        _ref = repo.users;\n        _results = [];\n        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n          user = _ref[_j];\n          _results.push(\"\" + user.user.username + \" (\" + (user.permissions.join(',')) + \")\");\n        }\n        return _results;\n      })();\n      table.push([repo.name, repo.anonRead, users.join('\\n')]);\n    }\n    console.log(table.toString());\n    return callback();\n  };\n\n  GITCLI.prototype.saveConfig = function() {\n    var config;\n    config = JSON.stringify({\n      repos: this.gitServer.repos,\n      users: this.users\n    });\n    return fs.writeFileSync(repoDB, config);\n  };\n\n  return GITCLI;\n\n})(EventEmitter);\n\n_g = new GitServer(repos.repos, logging, repoLocation, repoPort);\n\n_c = new GITCLI(_g, repos.users);\n"}